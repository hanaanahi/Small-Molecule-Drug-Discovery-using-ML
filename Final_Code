{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["JGznrwf_hNap"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Code Workflow\n","\n","This section will perform preprocessing and modeling. General Workflow and steps are as follows:\n","\n","### A. Pre-processing\n","\n","**1. Remove unnecessary columns:**\n","\n","* Remove all columns that only have a singular value throughout all rows\n","because it does not provide any helpful information or variance for the model to learn from. In addition, removing these columns will help reduce dimensionality. Eg- CID, PUBCHEM_COORDINATE_TYPE\n","\n","* The reason why we remove CID is because a chemical compound ID should not be considered a feature that will determine whether or not a chemical compound inhibit BRAF or not.\n","\n","* We remove column \"PUBCHEM_COORDINATE_TYPE\" because not only it is of type \"object,\" but also because the column only has a singular value. For Machine Learning, typically, it learns best from numerical values.\n","\n","**2. Handle Missing Values:**\n","\n","* If there is any N/A value in the coloumn, insteading of removing the rows corrosponding to the N/A values, replace the N/A with a number (if numerical data) or variable (if qualitative data) from that coloumn that has N/A value(s)\n","\n","* Computation Statergy: If N/A value within a numerical coloumn has a skew between -0.5 or +0.5 (near normal distribution), then replace that value of N/A with mean, else replace with median. If N/A within a qualitative column replace the variable with the most common element present in the coloumn\n","\n","* This computation statergy was chosen to retain the size and features of the dataset. Reducing the dataset by removing N/A values all together could lead to bias, significant data loss, hampering data integrity.\n","\n","**3. Split the dataset into Train and Test Set.**\n","\n","We set 70% of the data to be for training and 30% will be for the test set.\n","\n","**4. Standardize and Scale the Data**\n","\n","We scale the data to get the model to understand what features had a greater impact than others and helps improve the performance of the model.\n","\n","### B. Modeling\n","\n","**1. Model 1**\n","\n","Uses 1 (removing unecessary columns), 2 (handle missing values) , and 3 (split the dataset into test and train) steps from pre-processing, trains an SVM classifier and evaluates it using accuracy, classification report, and confusion matrix.\n","\n","**2. Model 2**\n","\n","Uses 1 (removing unecessary columns), 2 (handle missing values), 3 (split the dataset into test and train)and 4 (standardize and scale the data steps from pre-preprocesssing) trains an SVM classifier , uses GridSearchCV for hyperparameter tuning and evaluates the best model and evaluates it using accuracy, classification report, and confusion matrix."],"metadata":{"id":"E9Pq0V--2_XJ"}},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.impute import SimpleImputer\n","from sklearn.decomposition import PCA\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTE\n","import joblib # meant for saving pickle files\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import StratifiedKFold, GridSearchCV, cross_validate\n","import seaborn as sns\n","\n","# Method that will perform preprocessing steps for Model 1\n","# Input: a CSV file containing chemical compound\n","# Output: Train and test set after removing unnecessary columns, handled\n","# missing values, and splitting data into train and test set\n","def perform_preprocessing1(file):\n","    try:\n","        #Read the CSV file as a pandas DataFrame\n","        if not os.path.exists(file):\n","            raise FileNotFoundError(f\"The file '{file}' does not exist.\")\n","\n","        try:\n","            chemical_compounds_df = pd.read_csv(file)\n","        except pd.errors.EmptyDataError:\n","            raise ValueError(\"The file is empty.\")\n","        except pd.errors.ParserError:\n","            raise ValueError(\"The file is not in a valid CSV format.\")\n","\n","        # Step 1: Remove unnecessary columns\n","        single_val_columns = [col for col in chemical_compounds_df.columns if chemical_compounds_df[col].nunique() == 1]\n","        if 'CID' not in chemical_compounds_df.columns:\n","            raise KeyError(\"The column 'CID' is not present in the DataFrame.\")\n","        columns_to_drop = single_val_columns + ['CID']\n","\n","        cc_df_filtered = chemical_compounds_df.drop(columns=columns_to_drop, errors='ignore')\n","\n","        # Step 2: Handle missing values\n","        columns_with_nan = cc_df_filtered.columns[cc_df_filtered.isna().any()].tolist()\n","        print(f\"Columns with missing values: {columns_with_nan}\")\n","\n","        cc_df_filtered.replace('N/A', np.nan, inplace=True)\n","\n","        for column in columns_with_nan:\n","            if cc_df_filtered[column].dtype in ['int64', 'float64']:  # For numerical columns\n","                skewness = cc_df_filtered[column].skew()\n","                strategy = 'mean' if -0.5 <= skewness <= 0.5 else 'median'\n","\n","                # Apply SimpleImputer\n","                imputer = SimpleImputer(strategy=strategy)\n","                try:\n","                    cc_df_filtered[column] = imputer.fit_transform(cc_df_filtered[[column]])\n","                    print(f\"Imputed numerical column '{column}' using {strategy}\")\n","                except ValueError as e:\n","                    print(f\"Failed to impute column '{column}': {e}\")\n","            else:  # For categorical columns\n","                imputer = SimpleImputer(strategy='most_frequent')\n","                try:\n","                    cc_df_filtered[column] = imputer.fit_transform(cc_df_filtered[[column]])\n","                    print(f\"Imputed categorical column '{column}' using most frequent value\")\n","                except ValueError as e:\n","                    print(f\"Failed to impute column '{column}': {e}\")\n","\n","        # Step 3: Split the data into train and test set\n","        try:\n","            # Assuming 'split_data' splits data into features (X) and target (y)\n","            X_train, X_test, y_train, y_test = split_data(cc_df_filtered)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error during data splitting: {e}\")\n","\n","        # Save the original list of columns\n","        columns_list = X_train.columns.tolist()\n","        try:\n","            joblib.dump(columns_list, 'columns_list_og.pkl')\n","            print(\"Saved column list to 'columns_list_og.pkl'\")\n","        except IOError as e:\n","            raise IOError(f\"Failed to save column list: {e}\")\n","\n","        return X_train, X_test, y_train, y_test  # Returns split data into train and test sets\n","\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","        return None, None, None, None  # Return empty values if any error occurs\n","\n","# Method that will perform preprocessing steps for Model 2 (or Scaled + Hypertuned Model)\n","# Input: Train and test set after removing unnecessary columns,\n","# fill missing values, and split into train and test set\n","# Output: Scaled Train and test set\n","def perform_preprocessing2(X_train, X_test, y_train, y_test): #applies standard scalar\n","  X_train_scaled, X_test_scaled = standardize_scale(X_train, X_test)\n","  return X_train_scaled, X_test_scaled, y_train, y_test\n","\n","\n","# Method that will take a Pandas dataframe and split 70% of data into the train and the 30% to the test set\n","# Input: df - a Pandas dataframe containing the dataset\n","# Output: a tuple containing the train and test set: X_train, X_test, y_train, y_test\n","def split_data(df):\n","    try:\n","        # Check if the 'Class' column exists\n","        if 'Class' not in df.columns:\n","            raise KeyError(\"The 'Class' column is missing from the DataFrame. Unable to proceed.\")\n","\n","        # Separate features and target\n","        X = df.drop(columns='Class')\n","        y = df['Class']\n","\n","        # Ensure there are features after dropping 'Class'\n","        if X.empty:\n","            raise ValueError(\"The DataFrame has no features after dropping the 'Class' column.\")\n","\n","        # Ensure the target column is not empty\n","        if y.empty:\n","            raise ValueError(\"The 'Class' column is empty.\")\n","\n","        # Split the data into train and test sets\n","        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","        # Ensure split data is not empty\n","        if X_train.empty or X_test.empty or y_train.empty or y_test.empty:\n","            raise ValueError(\"The train-test split resulted in empty sets.\")\n","\n","\n","\n","        return X_train, X_test, y_train, y_test\n","\n","    except KeyError as e:\n","      print(f\"Error: {e}\")\n","      # Terminate execution since 'Class' column is essential\n","      raise SystemExit(f\"Terminating execution: {e}\")\n","    except ValueError as e:\n","      print(f\"Value Error: {e}\")\n","      raise\n","    except Exception as e:\n","      print(f\"An unexpected error occurred: {e}\")\n","      raise\n","\n","# Method that applies StandardScaler on the train and test set. It will also save a copy of the scaler used for later usage\n","# Inputs: the train and test set features dataframes\n","# Output: a tuple contain the scaled train and test set in Pandas dataframes\n","def standardize_scale(X_train, X_test):\n","  # Scale the training data\n","  scaler = StandardScaler()\n","  X_train_scaled = scaler.fit_transform(X_train)  # Fit the scaler to the training data and transform it\n","  X_test_scaled = scaler.transform(X_test) # apply this scaling to test too\n","\n","  # save fitted scaler for user's input later\n","  joblib.dump(scaler, 'scaler.pkl')\n","\n","  # Convert back to pandas DataFrame and keep the column names\n","  X_train_scaled = pd.DataFrame(X_train_scaled, columns=X_train.columns)\n","  X_test_scaled = pd.DataFrame(X_test_scaled, columns=X_test.columns)\n","  return X_train_scaled, X_test_scaled\n","\n","# Method that perform modeling for Model 1 and return Model 1\n","# The method will also display classification report and confusion matrix for Model 1\n","# Inputs: train set, test set, and the a filename to name the saved pickle file of Model 1\n","# Output: SVM Model 1 - model object\n","def svm_model_1(X_train, X_test, y_train, y_test, model_file_name):\n","    try:\n","        # Check if the training and test data are valid\n","        if X_train.empty or X_test.empty or y_train.empty or y_test.empty:\n","            raise ValueError(\"Training or test data is empty.\")\n","\n","        if len(X_train) != len(y_train):\n","            raise ValueError(\"Mismatch in lengths of X_train and y_train.\")\n","\n","        if len(X_test) != len(y_test):\n","            raise ValueError(\"Mismatch in lengths of X_test and y_test.\")\n","\n","        # Train the SVM model\n","        try:\n","            svm_model = SVC(class_weight='balanced', probability=True)\n","            svm_model.fit(X_train, y_train)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error training the SVM model: {e}\")\n","\n","        # Perform cross-validation with training scores\n","        try:\n","            cv_results = cross_validate(svm_model, X_train, y_train, cv=10, return_train_score=True)\n","            train_scores = cv_results['train_score']\n","            validation_scores = cv_results['test_score']\n","        except ValueError as e:\n","            raise ValueError(f\"Error in cross-validation: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error during cross-validation: {e}\")\n","\n","        # Print training and validation scores\n","        try:\n","            print(f\"Training Scores (per fold): {train_scores}\")\n","            print(f\"Validation Scores (per fold): {validation_scores}\")\n","            print(f\"Mean Training Accuracy: {np.mean(train_scores)}\")\n","            print(f\"Mean Validation Accuracy: {np.mean(validation_scores)}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Error calculating or printing scores: {e}\")\n","\n","        # Make predictions on the test set\n","        try:\n","            y_pred = svm_model.predict(X_test)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error during predictions: {e}\")\n","\n","        # Evaluate the model\n","        try:\n","            print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n","            print(classification_report(y_test, y_pred))\n","            print(\"ROC AUC:\", roc_auc_score(y_test, y_pred))\n","        except ValueError as e:\n","            raise ValueError(f\"Error during model evaluation: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error during model evaluation: {e}\")\n","\n","        # Create Confusion Matrix and display using heatmap\n","        try:\n","            cm = confusion_matrix(y_test, y_pred)\n","            plt.figure(figsize=(5, 4))\n","            sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n","                        xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])\n","            plt.title('BRAF Inhibitor or Not')\n","            plt.xlabel('Predicted')\n","            plt.ylabel('Actual')\n","            plt.show()\n","        except Exception as e:\n","            raise RuntimeError(f\"Error creating or displaying confusion matrix: {e}\")\n","\n","        # Save the model\n","        try:\n","            joblib.dump(svm_model, model_file_name)\n","            print(f\"Model {model_file_name} saved successfully!\")\n","        except IOError as e:\n","            raise IOError(f\"Failed to save the model to {model_file_name}: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error while saving the model: {e}\")\n","\n","        return svm_model\n","\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","        return None  # Return None if any critical error occurs\n","\n","\n","\n","\n","# Method that perform modeling and hypertunes the parameter for Model 2 (scaled data) and return Model 2\n","# The method will also display classification report and confusion matrix for Model 2\n","# Inputs: train set, test set, and the a filename to name the saved pickle file of Model 2\n","# Output: SVM Model 2 - model object\n","def svm_model_2_and_3(X_train, X_test, y_train, y_test, model_file_name):\n","    try:\n","        # Validate input data\n","        if X_train.empty or X_test.empty or y_train.empty or y_test.empty:\n","            raise ValueError(\"Training or test data is empty.\")\n","        if len(X_train) != len(y_train):\n","            raise ValueError(\"Mismatch in lengths of X_train and y_train.\")\n","        if len(X_test) != len(y_test):\n","            raise ValueError(\"Mismatch in lengths of X_test and y_test.\")\n","\n","        # Define the parameter grid for SVM\n","        param_grid = {\n","            'C': [0.01, 0.1, 1, 10, 100],  # Regularization parameter\n","            'kernel': ['linear', 'rbf', 'poly'],  # Kernel types\n","            'gamma': [0.01, 0.1, 1],  # Gamma values for RBF kernel\n","        }\n","\n","        # Initialize the SVM model\n","        try:\n","            svm_model = SVC(class_weight='balanced')\n","        except Exception as e:\n","            raise RuntimeError(f\"Error initializing SVM model: {e}\")\n","\n","        # Define Stratified K-Fold cross-validation\n","        try:\n","            stratified_kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error initializing StratifiedKFold: {e}\")\n","\n","        # Perform Grid Search with cross-validation\n","        try:\n","            grid_search = GridSearchCV(\n","                estimator=svm_model,\n","                param_grid=param_grid,\n","                cv=stratified_kfold,\n","                n_jobs=-1,\n","                verbose=1,\n","                scoring='accuracy'\n","            )\n","            grid_search.fit(X_train, y_train)\n","        except ValueError as e:\n","            raise ValueError(f\"Error in GridSearchCV fitting: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error during GridSearchCV: {e}\")\n","\n","        # Print the best hyperparameters from Grid Search\n","        try:\n","            best_params = grid_search.best_params_\n","            print(f\"Best Parameters: {best_params}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Error retrieving best parameters: {e}\")\n","\n","        # Best estimator (model) found by GridSearchCV\n","        try:\n","            best_svm_model = grid_search.best_estimator_\n","        except Exception as e:\n","            raise RuntimeError(f\"Error retrieving the best estimator: {e}\")\n","\n","        # Perform cross-validation with the best model\n","        try:\n","            cv_results = cross_validate(best_svm_model, X_train, y_train, cv=10, return_train_score=True)\n","            train_scores = cv_results['train_score']\n","            validation_scores = cv_results['test_score']\n","        except ValueError as e:\n","            raise ValueError(f\"Error in cross-validation with best model: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error during cross-validation: {e}\")\n","\n","        # Print training and validation scores\n","        try:\n","            print(f\"Training Scores (per fold): {train_scores}\")\n","            print(f\"Validation Scores (per fold): {validation_scores}\")\n","            print(f\"Mean Training Accuracy: {np.mean(train_scores)}\")\n","            print(f\"Mean Validation Accuracy: {np.mean(validation_scores)}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Error printing cross-validation scores: {e}\")\n","\n","        # Make predictions on the test set with the best model\n","        try:\n","            y_pred = best_svm_model.predict(X_test)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error during predictions on test set: {e}\")\n","\n","        # Evaluate the model\n","        try:\n","            print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n","            print(classification_report(y_test, y_pred))\n","            print(\"ROC AUC:\", roc_auc_score(y_test, y_pred))\n","        except ValueError as e:\n","            raise ValueError(f\"Error during model evaluation: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error during model evaluation: {e}\")\n","\n","        # Create Confusion Matrix and display using heatmap\n","        try:\n","            cm = confusion_matrix(y_test, y_pred)\n","            plt.figure(figsize=(5, 4))\n","            sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n","                        xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])\n","            plt.title('BRAF Inhibitor or Not')\n","            plt.xlabel('Predicted')\n","            plt.ylabel('Actual')\n","            plt.show()\n","        except Exception as e:\n","            raise RuntimeError(f\"Error creating or displaying confusion matrix: {e}\")\n","\n","        # Save the model\n","        try:\n","            joblib.dump(best_svm_model, model_file_name)\n","            print(f\"Model {model_file_name} saved successfully!\")\n","        except IOError as e:\n","            raise IOError(f\"Failed to save the model to {model_file_name}: {e}\")\n","        except Exception as e:\n","            raise RuntimeError(f\"Unexpected error while saving the model: {e}\")\n","\n","        return best_svm_model\n","\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","        return None  # Return None in case of critical errors\n","\n","# Main method to execute the preprocessing and modeling code block\n","# This method will expect chemical_compounds.csv file to be uploaded to this runtime.\n","# To execute this code, please refer to the README for the instructions\n","def main():\n","    try:\n","        # Replace 'your_file.csv' with the actual file path\n","        file = 'chemical_compounds.csv'\n","\n","        # Ensure the file exists\n","        if not os.path.exists(file):\n","            raise FileNotFoundError(f\"The file '{file}' does not exist.\")\n","\n","        print(f\"File '{file}' found. Starting preprocessing...\\n\")\n","\n","        # Preprocessed data prepped for modeling:\n","        try:\n","            X_train, X_test, y_train, y_test = perform_preprocessing1(file)\n","            X_train_scaled, X_test_scaled, y_train, y_test = perform_preprocessing2(X_train, X_test, y_train, y_test)\n","        except Exception as e:\n","            raise RuntimeError(f\"Error during preprocessing: {e}\")\n","\n","        print(f\"Preprocessing completed successfully. Starting modeling...\\n\")\n","\n","        # Models\n","        try:\n","            print(f\"\\nMODELING SECTION\\n\")\n","            print(f\"==========================================================\\n\")\n","            print(f\"SVM Model 1: ORIGINAL MODEL\")\n","            svm_model_og = svm_model_1(X_train, X_test, y_train, y_test, 'svm_model_og.pkl')\n","            print(f\"==========================================================\\n\")\n","            print(f\"SVM Model 2: SCALED MODEL AND HYPERTUNED MODEL\")\n","            svm_model_scaled = svm_model_2_and_3(X_train_scaled, X_test_scaled, y_train, y_test, 'svm_model_scaled.pkl')\n","            print(f\"==========================================================\\n\")\n","\n","        except Exception as e:\n","            raise RuntimeError(f\"Error during modeling: {e}\")\n","\n","        print(\"Modeling completed successfully!\")\n","\n","    except FileNotFoundError as e:\n","        print(f\"File Error: {e}\")\n","    except ValueError as e:\n","        print(f\"Value Error: {e}\")\n","    except RuntimeError as e:\n","        print(f\"Runtime Error: {e}\")\n","    except Exception as e:\n","        print(f\"An unexpected error occurred: {e}\")\n","    finally:\n","        print(\"Execution of main() is complete.\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"AcTdyZyikC3l","executionInfo":{"status":"ok","timestamp":1733946870907,"user_tz":480,"elapsed":8652,"user":{"displayName":"Hina Dawar","userId":"02511224069614914872"}},"outputId":"87d42590-b9fe-4cc7-d921-6b715716d644"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["File 'chemical_compounds.csv' found. Starting preprocessing...\n","\n","Columns with missing values: ['MNDO_E', 'MNDO_Eele', 'MNDO_HF', 'MNDO_HOMO', 'MNDO_IP', 'MNDO_LUMO']\n","Imputed numerical column 'MNDO_E' using median\n","Imputed numerical column 'MNDO_Eele' using median\n","Imputed numerical column 'MNDO_HF' using median\n","Imputed numerical column 'MNDO_HOMO' using median\n","Imputed numerical column 'MNDO_IP' using median\n","Imputed numerical column 'MNDO_LUMO' using median\n","Saved column list to 'columns_list_og.pkl'\n","Preprocessing completed successfully. Starting modeling...\n","\n","\n","MODELING SECTION\n","\n","==========================================================\n","\n","SVM Model 1: ORIGINAL MODEL\n","Training Scores (per fold): [0.58169935 0.59477124 0.59477124 0.58823529 0.5620915  0.5751634\n"," 0.60784314 0.60130719 0.59477124 0.62745098]\n","Validation Scores (per fold): [0.64705882 0.58823529 0.52941176 0.64705882 0.76470588 0.76470588\n"," 0.47058824 0.52941176 0.64705882 0.35294118]\n","Mean Training Accuracy: 0.5928104575163398\n","Mean Validation Accuracy: 0.5941176470588235\n","Accuracy: 0.4931506849315068\n","              precision    recall  f1-score   support\n","\n","           0       0.33      1.00      0.49        18\n","           1       1.00      0.33      0.49        55\n","\n","    accuracy                           0.49        73\n","   macro avg       0.66      0.66      0.49        73\n","weighted avg       0.83      0.49      0.49        73\n","\n","ROC AUC: 0.6636363636363636\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Model svm_model_og.pkl saved successfully!\n","==========================================================\n","\n","SVM Model 2: SCALED MODEL AND HYPERTUNED MODEL\n","Fitting 10 folds for each of 45 candidates, totalling 450 fits\n","Best Parameters: {'C': 0.01, 'gamma': 0.01, 'kernel': 'linear'}\n","Training Scores (per fold): [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n","Validation Scores (per fold): [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n","Mean Training Accuracy: 1.0\n","Mean Validation Accuracy: 1.0\n","Accuracy: 0.9726027397260274\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.89      0.94        18\n","           1       0.96      1.00      0.98        55\n","\n","    accuracy                           0.97        73\n","   macro avg       0.98      0.94      0.96        73\n","weighted avg       0.97      0.97      0.97        73\n","\n","ROC AUC: 0.9444444444444444\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 500x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Model svm_model_scaled.pkl saved successfully!\n","==========================================================\n","\n","Modeling completed successfully!\n","Execution of main() is complete.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"3xf1EQtRHRTA"},"execution_count":null,"outputs":[]}]}